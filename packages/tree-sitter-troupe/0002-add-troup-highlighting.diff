diff --git a/grammar.js b/grammar.js
index 1495bec..d6c1094 100644
--- a/grammar.js
+++ b/grammar.js
@@ -254,6 +254,7 @@ module.exports = grammar({
             $.word_scon,
             $.real_scon,
             $.string_scon,
+            $.label_scon,
             $.char_scon,
         ),
 
@@ -261,6 +262,7 @@ module.exports = grammar({
         word_scon: $ => token(new RegExp(wordConstRE)),
         real_scon: $ => token(new RegExp(realConstRE)),
         string_scon: $ => token(/"(?:[^"\\]|\\[^\s]|\\\s*\\)*"/m),
+        label_scon: $ => token(/`\{(?:[^"\\]|\\[^\s]|\\\s*\\)*\}`/m),
         char_scon: $ => token(/#"(?:[^"\\]|\\[^\s]|\\\s*\\)*"/m),
 
         // ******************************************************** //
@@ -270,10 +272,55 @@ module.exports = grammar({
         _alphaAlphaNumeric_ident: $ => token(new RegExp(alphaAlphaNumericIdentRE)),
         _primeAlphaNumeric_ident: $ => token(new RegExp(primeAlphaNumericIdentRE)),
         _symbolic_ident: $ => token(new RegExp(symbolicIdentRE)),
+        _builtins: $ => choice(
+            "adv",
+            "attenuate",
+            "authority",
+            "debugpc",
+            "declassify",
+            "exit",
+            "getTime",
+            "inputLine",
+            "lowermbox",
+            "mkuuid",
+            "node",
+            "pinipop",
+            "pinipush",
+            "pinipushto",
+            "print",
+            "printString",
+            "printWithLabels",
+            "raiseTrust",
+            "raisembox",
+            "random",
+            "receive",
+            "register",
+            "rcv",
+            "sandbox",
+            "self",
+            "send",
+            "_setProcessDebuggingName",
+            "sleep",
+            "spawn",
+            "raisedTo",
+            "whereis",
+            "declassify_with_block",
+            "declassifydeep",
+            "map",
+            "mapi",
+            "foldi",
+            "range",
+            "reverse",
+            "lookup",
+            "elem",
+            "length",
+            "append",
+            "partition",
+        ),
 
         tyvar: $ => choice($._primeAlphaNumeric_ident),
         tyvarseq: $ => mkSeq($.tyvar),
-        vid: $ => choice($._alphaAlphaNumeric_ident,$._symbolic_ident),
+        vid: $ => choice($._builtins,$._alphaAlphaNumeric_ident,$._symbolic_ident),
         longvid: $ => seq(repeat(seq($.strid, ".")), $.vid),
         tycon: $ => choice($._alphaAlphaNumeric_ident,$._symbolic_ident),
         longtycon: $ => seq(repeat(seq($.strid, ".")), $.tycon),
@@ -340,7 +387,7 @@ module.exports = grammar({
         // The Definition orders by decreasing precedence
         _exp: $ => choice(
             $._atexp,
-            $.app_exp,
+            // $.app_exp,
             $.typed_exp,
             $.conj_exp,
             $.disj_exp,
@@ -356,7 +403,7 @@ module.exports = grammar({
         typed_exp: $ => prec(09, seq($._exp, ":", $._ty)),
         conj_exp: $ => prec.left(08, seq($._exp, "andalso", $._exp)),
         disj_exp: $ => prec.left(07, seq($._exp, "orelse", $._exp)),
-        handle_exp: $ => prec(06, seq($._exp, "handle", $._match)),
+        handle_exp: $ => prec(06, seq("hn", $._pat, optional(seq("when", $._exp)), "=>", $._exp)),
         raise_exp: $ => prec(05, seq("raise", $._exp)),
         cond_exp: $ => prec.right(04, seq(
             "if", $._exp,
@@ -718,7 +765,6 @@ module.exports = grammar({
             $.datarepl_spec,
             $.exception_spec,
             $.structure_spec,
-            $.include_spec,
             $.sharingtype_spec,
             $.sharing_spec,
         ),
@@ -773,8 +819,6 @@ module.exports = grammar({
         _strdesc: $ => mkSepBy1("and", $.strdesc),
         strdesc: $ => seq($.strid, ":", $._sigexp),
 
-        include_spec: $ => seq("include", choice($._sigexp,seq($.sigid,repeat1($.sigid)))),
-
         sharingtype_spec: $ => seq("sharing", "type", mkSepBy2("=", $.longtycon)),
 
         sharing_spec: $ => seq("sharing", mkSepBy2("=", $.longstrid)),
@@ -801,7 +845,10 @@ module.exports = grammar({
         // Topdecs
         // ******************************************************** //
 
+        _include_dec: $ => seq("import", choice($.sigid)),
+
         _topdec: $ => choice(
+            $._include_dec,
             $._strdec,
             $._sigdec,
             $._fctdec
diff --git a/queries/highlights.scm b/queries/highlights.scm
index 8773603..670b6ad 100644
--- a/queries/highlights.scm
+++ b/queries/highlights.scm
@@ -10,21 +10,37 @@
 
 [
  ;; Reserved Words Core
- "abstype" "and" "andalso" "as" "case" "datatype" "do" "else" "end"
- "exception" "fn" "fun" "handle" "if" "in" "infix" "infixr" "let"
- "local" "nonfix" "of" "op" "open" "orelse" "raise" "rec" "then"
- "type" "val" "with" "withtype" "while"
+ "and" "andalso" "as" "case" "do" "else" "end"
+ "exception" "fn" "fun" "hn" "if" "in" "infix" "infixr" "let"
+ "local" "of" "op" "open" "orelse" "raise" "rec" "then"
+ "type" "val" "when" "with" "withtype" "while"
  ;; Reserved Words Modules
- "eqtype" "functor" "include" "sharing" "sig" "signature" "struct"
+ "eqtype" "functor" "import" "sharing" "sig" "signature" "struct"
  "structure" "where"
 ] @keyword
 
+[
+ ;; Built-in functions
+ "adv" "attenuate" "authority" "debugpc" "declassify" "exit" "getTime"
+ "inputLine" "lowermbox" "mkuuid" "node" "pinipop" "pinipush" "pinipushto"
+ "print" "printString" "printWithLabels" "raiseTrust" "raisembox" "random"
+ "receive" "register" "rcv" "sandbox" "self" "send" "_setProcessDebuggingName"
+ "sleep" "spawn" "raisedTo" "whereis"
+
+ ;; Library functions
+ "declassify_with_block" "declassifydeep"
+
+ "map" "mapi" "foldi" "range" "reverse" "lookup" "elem" "length"
+ "append" "partition"
+] @function.builtin
+
 ;; *******************************************************************
 ;; Constants
 ;; *******************************************************************
 
 [(integer_scon) (word_scon) (real_scon)] @number
 [(string_scon) (char_scon)] @string
+[(label_scon) (char_scon)] @string.special
 
 ;; *******************************************************************
 ;; Types
