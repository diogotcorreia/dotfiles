#!/bin/sh

# Prints all batteries, their percentage remaining and an emoji corresponding
# to charge status ( for plugged up,  for discharging on battery, etc.).

# Don't do anything if the computer doesn't have a battery
[ ! -e /sys/class/power_supply/BAT0 ] && exit 0

case $BLOCK_BUTTON in
	3) notify-send " Battery module" ": discharging
: not charging
: stagnant charge
: charging
: charged
: battery very low!
- Scroll to change adjust xbacklight." ;;
	4) xbacklight -inc 10 ;;
	5) xbacklight -dec 10 ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*; do
	# If non-first battery, print a space separator.
	[ -n "${capacity+x}" ] && printf " "
	# Sets up the status and capacity
	case "$(cat "$battery/status")" in
		"Full") status="" ;;
		"Discharging") status="" ;;
		"Charging") status="" ;;
		"Not charging") status="" ;;
		"Unknown") status="" ;;
	esac
	capacity=$(cat "$battery/capacity")
	# Will make a warn variable if discharging and low
	[ "$status" = "" ] && [ "$capacity" -le 10 ] && warn=""
	[ "$status" = "" ] && [ "$capacity" -le 10 ] && status=""
	[ "$status" = "" ] && [ "$capacity" -le 25 ] && status=""
	[ "$status" = "" ] && [ "$capacity" -le 50 ] && status=""
	[ "$status" = "" ] && [ "$capacity" -le 75 ] && status=""
	# Prints the info
	printf "%s%s %d%%" "$status" "$warn" "$capacity"; unset warn
done && exit 0
